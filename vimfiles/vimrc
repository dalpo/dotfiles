set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'ctrlp.vim'
Plugin 'mileszs/ack.vim'
Plugin 'w0rp/ale'
Plugin 'ervandew/supertab'
Plugin 'benmills/vimux'
Plugin 'scrooloose/nerdtree'
Plugin 'dracula/vim'
Plugin 'vim-airline/vim-airline'
Plugin 'sotte/presenting.vim'
" Plugin 'vim-airline/vim-airline-themes'
" Plugin 'chriskempson/base16-vim'
" Plugin 'molokai'
" Plugin 'Yggdroot/indentLine'

" Lang supports
Plugin 'git@github.com:onemanstartup/vim-slim.git'
Plugin 'leafgarland/typescript-vim'
Plugin 'elixir-editors/vim-elixir'
Plugin 'tpope/vim-markdown'

" Leader
let mapleader = " "

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
set number
set numberwidth=5

" Show relative numbers
set relativenumber

" Set soft tabs
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Display trailing spaces
set list listchars=trail:.

" Setup vim airline
let g:airline_theme='simple'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Setup nerdtree
map <C-n> :NERDTreeToggle<CR>

" Setup vimux
" Run the current file with rspec
map <Leader>rb :call VimuxRunCommand("clear; bundle exec rspec " . bufname("%"))<CR>
" Run command without sending a return
map <Leader>rq :call VimuxRunCommand("clear; bundle exec rspec " . bufname("%"), 0)<CR>

" Setup Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

" and use the Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag --literal --files-with-matches --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

let g:indentLine_char = '·'
" let g:indentLine_char = '▸'
" let g:indentLine_setColors = 0
let g:indentLine_color_term = 239
" set listchars=eol:⏎,tab:␉·,trail:␠,nbsp:⎵

" Strip trailing whitespaces on save
autocmd BufWritePre * %s/\s\+$//e

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Use dracula theme
let g:dracula_italic = 0
let g:airline_theme='dracula'

colorscheme dracula

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

